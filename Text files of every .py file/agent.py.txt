# agents/agent.py

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
from models.cnn_model import CNNModel

class DQNAgent:
    def __init__(self, input_channels, num_actions, lr=1e-4, gamma=0.99, epsilon_start=1.0, epsilon_end=0.01, epsilon_decay=500):
        """
        DQN Agent with CNN for Atari environments.
        
        Args:
            input_channels (int): Number of input channels (e.g., 4 for stacked frames).
            num_actions (int): Number of possible actions.
            lr (float): Learning rate for optimizer.
            gamma (float): Discount factor for Q-learning.
            epsilon_start (float): Initial value of epsilon for epsilon-greedy strategy.
            epsilon_end (float): Final value of epsilon.
            epsilon_decay (int): Decay rate for epsilon.
        """
        self.num_actions = num_actions
        self.gamma = gamma
        self.epsilon = epsilon_start
        self.epsilon_end = epsilon_end
        self.epsilon_decay = epsilon_decay
        
        # Create the Q-network (CNN-based)
        self.q_network = CNNModel(input_channels=input_channels, num_actions=num_actions)
        
        # Target network for stability in training
        self.target_network = CNNModel(input_channels=input_channels, num_actions=num_actions)
        self.target_network.load_state_dict(self.q_network.state_dict())
        
        # Optimizer
        self.optimizer = optim.Adam(self.q_network.parameters(), lr=lr)
        
        # Loss function: Mean Squared Error for DQN
        self.loss_fn = nn.MSELoss()
        
        # Device configuration (GPU if available)
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.q_network.to(self.device)
        self.target_network.to(self.device)
        
    def select_action(self, state, step):
        """
        Select an action using an epsilon-greedy strategy.
        
        Args:
            state (torch.Tensor): The current state input to the network.
            step (int): Current step in training to decay epsilon.
            
        Returns:
            int: The selected action.
        """
        # Epsilon decay schedule
        epsilon_threshold = self.epsilon_end + (self.epsilon - self.epsilon_end) * np.exp(-1. * step / self.epsilon_decay)
        
        if np.random.rand() < epsilon_threshold:
            # Explore: Random action
            return np.random.randint(0, self.num_actions)
        else:
            # Exploit: Select action based on Q-values from the network
            state = torch.FloatTensor(state).unsqueeze(0).to(self.device)  # Add batch dimension
            with torch.no_grad():
                q_values = self.q_network(state)
            return q_values.argmax().item()

    # agents/agent.py

    def update(self, batch):
        """
        Update the Q-network using a batch of experience from replay buffer.
        
        Args:
            batch (tuple): A batch of experience tuples (state, action, reward, next_state, done).
            
        Returns:
            loss: The computed loss value for this update step.
        """
        states, actions, rewards, next_states, dones = batch
        
        # Convert to tensors and send to device
        states = torch.FloatTensor(states).to(self.device)
        actions = torch.LongTensor(actions).to(self.device)
        rewards = torch.FloatTensor(rewards).to(self.device)
        next_states = torch.FloatTensor(next_states).to(self.device)
        dones = torch.FloatTensor(dones).to(self.device)

        # Print the shape of states before passing into CNN
        print(f"State shape before passing into CNN: {states.shape}")

        # Compute current Q-values from q_network
        q_values = self.q_network(states).gather(1, actions.unsqueeze(1)).squeeze(1)

        # Compute target Q-values from target_network using Bellman equation
        next_q_values = self.target_network(next_states).max(1)[0]
        
        # If done is True, there is no next state; hence target is just reward
        targets = rewards + (1 - dones) * self.gamma * next_q_values
        
        # Compute loss between current and target Q-values
        loss = self.loss_fn(q_values, targets.detach())
        
        # Backpropagation and optimization step
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

    def update_target_network(self):
        """
        Update the target network by copying weights from the main Q-network.
        """
        self.target_network.load_state_dict(self.q_network.state_dict())